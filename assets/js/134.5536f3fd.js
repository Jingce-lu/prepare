(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{335:function(t,a,r){"use strict";r.r(a);var e=r(1),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"分治、动态规划、备忘录的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分治、动态规划、备忘录的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 分治、动态规划、备忘录的区别")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%88%86%E6%B2%BB%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%A4%87%E5%BF%98%E5%BD%95%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("分治、动态规划、备忘录的区别")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%88%86%E6%B2%BB"}},[t._v("分治")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92"}},[t._v("动态规划")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%A4%87%E5%BF%98%E5%BD%95"}},[t._v("备忘录")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%80%8E%E4%B9%88%E9%80%89%E6%8B%A9"}},[t._v("怎么选择")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E4%B8%8E%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B"}},[t._v("自底向上与自顶向下")])])])])]),t._v(" "),r("h2",{attrs:{id:"分治"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分治","aria-hidden":"true"}},[t._v("#")]),t._v(" 分治")]),t._v(" "),r("p",[t._v("分治算法对问题进行分解时所遵循的原则是将待求解问题分解为若干个规模较小、相互独立且与原问题相同的子问题（不包含公共的子问题）")]),t._v(" "),r("h2",{attrs:{id:"动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态规划","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),r("p",[t._v("对问题进行分解时所遵循的原则是将待求解问题分解为若干个规模较小、相互关联的与原问题类似的子问题（包含公共的子问题），采用记录表的方法来保存所有已解决问题的答案，而在需要的时候再找出已求得的答案，避免大量的重复计算。与分治法类似，动态规划法 也是把问题一层一层地分解为规模逐渐减小的同类型的子问题。动态规划法与分治法的一个重要的不同点在于，用分治法分解后得到的子问题通常都是相互独立的， 而用动态规划法分解后得到的子问题很多都是重复的。因此，对重复出现的子问题，只是在第一次遇到时才进行计算，然后把计算所得的结果保存起来；当再次遇到该子问题时，就直接引用已保存的结果，而不再重新求解。")]),t._v(" "),r("h2",{attrs:{id:"备忘录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#备忘录","aria-hidden":"true"}},[t._v("#")]),t._v(" 备忘录")]),t._v(" "),r("p",[t._v("是动态规划算法的变形，它通过分治思想对原问题进行分解，以存储子问题的解的方式解决冗余计算，并采用自顶向下的递归方式获取问题的最终解。与动态规划算法的不同之处是动态规划算法的递归方式是自底向上递归求解，而备忘录方法的递归方式是自顶向下递归求解")]),t._v(" "),r("h2",{attrs:{id:"怎么选择"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#怎么选择","aria-hidden":"true"}},[t._v("#")]),t._v(" 怎么选择")]),t._v(" "),r("p",[t._v("当一个问题的所有子问题都至少要解一次时，使用动态规划算法。\n当子问题空间中的部分子问题不需要求解时，使用备忘录方法。")]),t._v(" "),r("h2",{attrs:{id:"自底向上与自顶向下"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自底向上与自顶向下","aria-hidden":"true"}},[t._v("#")]),t._v(" 自底向上与自顶向下")]),t._v(" "),r("ul",[r("li",[t._v("自底向上："),r("strong",[t._v("从初始已知的状态出发，向外拓展，最后到达目标状态")]),t._v("。")]),t._v(" "),r("li",[t._v("自顶向下："),r("strong",[t._v("从最终状态开始，找到可以到达当前状态的状态，如果该状态还没处理，就先处理该状态")]),t._v("。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);