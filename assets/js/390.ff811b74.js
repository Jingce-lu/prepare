(window.webpackJsonp=window.webpackJsonp||[]).push([[390],{922:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" js 类型转换")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#js-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"}},[t._v("js 类型转换")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80js%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7"}},[t._v("一、JS运算符的优先级")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8Cjs%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96"}},[t._v("二、JS的类型转化")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E5%AF%B9%E4%BA%8E%E9%9D%9E%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%80%9A%E8%BF%87toprimitive-%E5%B0%86%E5%80%BC%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B"}},[t._v("1. 对于非原始类型的，通过ToPrimitive() 将值转换成原始类型：")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E9%80%9A%E8%BF%87tonumber%E6%8A%8A%E5%80%BC%E8%BD%AC%E6%8D%A2%E6%88%90number"}},[t._v("2. 通过ToNumber()把值转换成Number")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E9%80%9A%E8%BF%87tostring%E6%8A%8A%E5%80%BC%E8%BD%AC%E5%8C%96%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2"}},[t._v("3. 通过ToString()把值转化成字符串")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E6%AD%A5%E6%AD%A5%E6%89%A7%E8%A1%8C"}},[t._v("三、步步执行")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E5%B0%8F%E7%BB%93"}},[t._v("四、小结")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%94-ecmascript%E7%9A%84%E8%A7%84%E8%8C%83%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%93%8D%E4%BD%9C"}},[t._v("五、 ECMAScript的规范定义的抽象操作")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#51-%E5%8E%9F%E5%A7%8B%E5%80%BC"}},[t._v("5.1 原始值")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#52-getvaluev"}},[t._v("5.2 GetValue(v)")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#53-samevaluexy"}},[t._v("5.3 SameValue(x,y)")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#54-toprimitiveinput---preferredtype"}},[t._v("5.4 ToPrimitive(input [ , PreferredType])")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#objvalueof-%E5%92%8C-objtostring"}},[t._v("obj.valueOf() 和 obj.toString()")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#tostring%E7%94%A8%E6%9D%A5%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA"}},[t._v("toString用来返回对象的字符串表示。")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#valueof%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%8F%AF%E8%83%BD%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E5%80%BC%E6%88%96bool%E5%80%BC%E7%AD%89%E7%9C%8B%E5%85%B7%E4%BD%93%E7%9A%84%E5%AF%B9%E8%B1%A1"}},[t._v("valueOf方法返回对象的原始值，可能是字符串、数值或bool值等，看具体的对象。")])])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#55-tonumberx"}},[t._v("5.5 ToNumber(x)")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#56-tostringx"}},[t._v("5.6 ToString(x)")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#57-%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99"}},[t._v("5.7 ==转换规则：")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%AD%E9%AA%8C%E8%AF%81%E5%88%86%E6%9E%9010"}},[t._v("六、验证分析++[[]][+[]]+[+[]]==10?")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1%E9%A6%96%E5%85%88%E9%A6%96%E5%85%88%E6%8B%86%E5%88%86%E4%B8%80%E4%B8%8B"}},[t._v("1.首先++[[]][+[]]+[+[]]首先拆分一下：")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2%E5%85%88%E6%9D%A5%E5%88%86%E6%9E%90%E5%8F%B3%E8%BE%B9%E7%9A%84"}},[t._v("2.先来分析右边的[+[]]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3%E5%86%8D%E6%9D%A5%E5%88%86%E6%9E%90%E5%B7%A6%E8%BE%B9%E8%BE%B9%E7%9A%84"}},[t._v("3.再来分析左边边的++[[]][+[]]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E9%94%99%E8%AF%AF%E7%9A%84%E5%8E%9F%E5%9B%A0"}},[t._v("4.分析问题错误的原因")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#5%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%8B%86%E5%88%86"}},[t._v("5.进一步拆分")])])])])])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"一、js运算符的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、js运算符的优先级","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、JS运算符的优先级")]),t._v(" "),a("p",[t._v("优先级的排列如下表：")]),t._v(" "),a("p",[t._v("优先级从高到低：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v(".[]()")]),t._v(" "),a("td",[t._v("字段访问、数组下标、函数调用以及表达式分组")])]),t._v(" "),a("tr",[a("td",[t._v("++ — - + ~ ! delete new typeof void")]),t._v(" "),a("td",[t._v("一元运算符、返回数据类型、对象创建、未定义值")])]),t._v(" "),a("tr",[a("td",[t._v("* / %")]),t._v(" "),a("td",[t._v("相乘、相除、求余数")])]),t._v(" "),a("tr",[a("td",[t._v("+ - +")]),t._v(" "),a("td",[t._v("相加、 相减、字符串串联")])]),t._v(" "),a("tr",[a("td",[t._v("<< >> >>>")]),t._v(" "),a("td",[t._v("移位")])]),t._v(" "),a("tr",[a("td",[t._v("< <= > >= instanceof")]),t._v(" "),a("td",[t._v("小于、 小于或等于、 大于、 大于或等于、 是否为特定类型的实例")])]),t._v(" "),a("tr",[a("td",[t._v("== != === !==")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("&")]),t._v(" "),a("td",[t._v('按位”与"')])]),t._v(" "),a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("按位“异或”")])]),t._v(" "),a("tr",[a("td",[t._v("\\")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("&&")]),t._v(" "),a("td",[t._v("逻辑“与”")])]),t._v(" "),a("tr",[a("td",[t._v("\\")]),t._v(" "),a("td",[t._v("\\")])]),t._v(" "),a("tr",[a("td",[t._v("?:")]),t._v(" "),a("td",[t._v("条件运算")])]),t._v(" "),a("tr",[a("td",[t._v("= OP=")]),t._v(" "),a("td",[t._v("赋值、 赋值运算（ 如 += 和 &= ）")])]),t._v(" "),a("tr",[a("td",[t._v("，")]),t._v(" "),a("td",[t._v("多个计算")])])])]),t._v(" "),a("p",[t._v("根据此规则，我们把这一串运算分为以下16个子表达式：\n")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://github.com/Jingce-lu/mystudy/blob/more/assets/jstype.jpg"}})]),a("p"),t._v(" "),a("p",[t._v("运算符用红色标出，有一点可能大家会意识不到，其实中括号"),a("code",[t._v("[]")]),t._v("也是一个运算符，用来通过索引访问数组项，另外也可以访问字符串的子字符，有点类似charAt方法，如："),a("code",[t._v("'abcd'[1] // 返回’b’")]),t._v("。而且"),a("code",[t._v("中括号的优先级还是最高的")])]),t._v(" "),a("h2",{attrs:{id:"二、js的类型转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、js的类型转化","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、JS的类型转化")]),t._v(" "),a("p",[t._v("先说说什么情况下需要进行类型转化。当操作符两边的操作数类型不一致或者不是基本类型（也叫原始类型）时，需要进行类型转化。先按运算符来分一下类：")]),t._v(" "),a("ul",[a("li",[t._v("减号-，乘号*，肯定是进行数学运算，所以操作数需转化为number类型。")]),t._v(" "),a("li",[t._v("加号+，可能是字符串拼接，也可能是数学运算，所以可能会转化为number或string")]),t._v(" "),a("li",[t._v("一元运算，如+[]，只有一个操作数的，转化为number类型")])]),t._v(" "),a("p",[t._v("下面来看一下转化规则。")]),t._v(" "),a("h3",{attrs:{id:"_1-对于非原始类型的，通过toprimitive-将值转换成原始类型："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-对于非原始类型的，通过toprimitive-将值转换成原始类型：","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 对于非原始类型的，通过ToPrimitive() 将值转换成原始类型：")]),t._v(" "),a("p",[t._v("ToPrimitive(input, PreferredType?)")]),t._v(" "),a("p",[t._v("可选参数PreferredType是Number或者是String。返回值为任何原始值。如果PreferredType是Number，执行顺序如下：")]),t._v(" "),a("ul",[a("li",[t._v("如果input为primitive，返回")]),t._v(" "),a("li",[t._v("否则，input为Object。调用 obj.valueOf()。如果结果是primitive，返回。")]),t._v(" "),a("li",[t._v("否则，调用obj.toString(). 如果结果是primitive，返回")]),t._v(" "),a("li",[t._v("否则，抛出TypeError")]),t._v(" "),a("li",[t._v("如果 PreferredType是String，步骤2跟3互换，如果PreferredType没有，Date实例被设置成String，其他都是Number")])]),t._v(" "),a("h3",{attrs:{id:"_2-通过tonumber-把值转换成number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-通过tonumber-把值转换成number","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 通过ToNumber()把值转换成Number")]),t._v(" "),a("p",[t._v("规则如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Undefined")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("Null")]),t._v(" "),a("td",[t._v("+0")])]),t._v(" "),a("tr",[a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("true转换为1, false 转换为0")])]),t._v(" "),a("tr",[a("td",[t._v("number")]),t._v(" "),a("td",[t._v("无需转换")])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v('由字符串解析为数字，如"123"被转换为123')])])])]),t._v(" "),a("h3",{attrs:{id:"_3-通过tostring-把值转化成字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-通过tostring-把值转化成字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 通过ToString()把值转化成字符串")]),t._v(" "),a("p",[t._v("规则如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v('"undefined"')])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v('"null"')])]),t._v(" "),a("tr",[a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v('"true"或者"false"')])]),t._v(" "),a("tr",[a("td",[t._v("number")]),t._v(" "),a("td",[t._v('数字作为字符串，比如，"1.765"')])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("无需转换")])])])]),t._v(" "),a("h2",{attrs:{id:"三、步步执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、步步执行","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、步步执行")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("先看最简单的子表达式16：+[]\n只有一个操作数[]，肯定是转化为number了，根据上面的规则2，[]是个数组，object类型，即对象。所以得先调用toPrimitive转化为原始类型，并且PreferredType为number，这个参数表示更“倾向于”转化的类型，这里肯定是number了。然后首先调用数组的valueOf方法，数组调用valueOf会返回自身，如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这个时候，我们得到一个空串“”，还没有结束，看上面的规则2描述，继续调用toNumber，转化为number类型，如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("子表达式16转化完毕，+[]，最终得到0。")])]),t._v(" "),a("li",[a("p",[t._v("来看子表达式15："),a("code",[t._v("[~+””]")]),t._v("\n空串””前面有两个一元操作符，但是操作数还是只有一个，所以，最终要转化为的类型是number。看规则2吧，空串调用toNumber得到0。接下来是~，这是个什么东东呢？它是位运算符，"),a("code",[t._v("作用可以记为把数字取负然后减一")]),t._v("，所以"),a("code",[t._v("~0就是-1")]),t._v(" 。")]),t._v(" "),a("p",[t._v("别忘了，这个子表达式外头还包着中括号，所以最终的值为"),a("code",[t._v("[-1]")]),t._v("，即一个数组，里面只有一个元素-1.")])]),t._v(" "),a("li",[a("p",[t._v("接下来看子表达式13就简单了，把15、16求出来的填进去，就变成了这样：–[-1][0]，取数组的第0个元素，然后自减，结果为-2，是不so easy!")])]),t._v(" "),a("li",[a("p",[t._v("继续往上走，子表达式14： [~+[]]\n其实把15、和16的原理用上就非常明显了，答案[-1]")])]),t._v(" "),a("li",[a("p",[t._v("继续来求子表达式9，\n此刻它已变成：-2*[-1]，有稍许不一样，不过没关系，我们还是按照规则来，运算符是乘号*，当然是做数学运算，那后面的[-1]就得转化为number，与16的求法类似，过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("调用toPrimitive，发现是object类型")]),t._v(" "),a("li",[t._v("调用valueOf，返回自身[-1]")]),t._v(" "),a("li",[t._v("因为不是原始类型，继续调用toString，返回”-1″")]),t._v(" "),a("li",[t._v("”-1″是原始类型了，然后调用toNumber，返回-1")]),t._v(" "),a("li",[t._v("与-2相乘，返回2")])])]),t._v(" "),a("li",[a("p",[t._v("子表达式10：~~!+[]，不多说了，答案1. 就是从右往左依次一元计算。")])]),t._v(" "),a("li",[a("p",[t._v("有了9和10，我们来到了子表达式4，此刻它已经长这样了：2+1，")])]),t._v(" "),a("li",[a("p",[t._v("继续看表达式7：!(~+[])，~+[]=-1，这个根据上面已经知道了，那!-1是什么呢？这里要说一下这个感叹号，它是逻辑取非的意思，会把表达式转化为布尔类型，转化规则和js的Truthy和Falsy原则是一样的，后面跟数字的，除0以外都为false，后面跟字符串的，除空串以外都为false。这里的!-1当然就是false了。")])]),t._v(" "),a("li",[a("p",[t._v("接下来这个表达式3：false+{}有点关键。\n一个布尔加一个对象，那这个{}应该先转化为原始类型，流程如下：")]),t._v(" "),a("ol",[a("li",[t._v("调用toPrimitive，发现是object类型")]),t._v(" "),a("li",[t._v("调用valueOf，返回自身{}，")]),t._v(" "),a("li",[t._v("不是原始类型，调用toString，返回”[object Object]”")]),t._v(" "),a("li",[t._v("false与”[object Object]”相加，false先转化为字符串”false”")]),t._v(" "),a("li",[t._v("相加得结果”false[object Object]”")])])]),t._v(" "),a("li",[a("p",[t._v("知道了表达式3和4，我们就可以来看表达式1了，此时它是这样的：”false[object Object]”[3]，因为这个[]可以取字符串的子字符，像charAt一样，所以得到了结果”s”")])])]),t._v(" "),a("h2",{attrs:{id:"四、小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、小结")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("数组下标([])优先级最高， 一元运算符（--，++，+，-）的优先级高于加法或减法运算符（+，-）；")]),t._v(" "),a("li",[t._v("++前增量运算符，就是数值上加 1；")]),t._v(" "),a("li",[t._v("一元运算符（+，-）的后面如果不是数字，会调用 ToNumber 方法按照规则转化成数字类型。")]),t._v(" "),a("li",[t._v("对于加号运算符(+)"),a("br"),t._v("\n首先执行代码，调用 ToPrimitive 方法得到原始值"),a("br"),t._v("\n①如果原始值是两个数字，则直接相加得出结果。"),a("br"),t._v("\n②如果两个原始值都是字符串，把第二个字符串连接到第一个上，也就是相当于调用 concat 方法。"),a("br"),t._v("\n③如果只有一个原始值是字符串，调用 ToString 方法把另一个运算数转换成字符串，结果是两个字符串连接成的字符串。")]),t._v(" "),a("li",[t._v("对于减号运算符(-)"),a("br"),t._v("\n不知道大家有没有看到ECMAScript规范，这里比+少了一步 ToPrimitive ，所以 - 相对容易理解。"),a("br"),t._v("\n①如果是两个数字，则直接相减得出结果"),a("br"),t._v("\n②如果有一个不是数字，会调用 ToNumber 方法按照规则转化成数字类型，然后进行相减。")]),t._v(" "),a("li",[t._v("分号的插入"),a("br"),t._v("\n①新行并入当前行将构成非法语句，自动插入分号。"),a("br"),t._v("\n②在continue,return,break,throw后自动插入分号"),a("br"),t._v("\n③++、--后缀表达式作为新行的开始，在行首自动插入分号"),a("br"),t._v("\n④代码块的最后一个语句会自动插入分号"),a("br"),t._v("\n⑤新行以 ( 、[、\\、+ 、 - 、,、. % 和 *开始都不会插入分号")]),t._v(" "),a("li",[t._v("{}的两种解读"),a("br"),t._v("\n①当{}的前面有运算符号的时候，+，-，*，/,()等等，{}都会被解析成对象字面量，这无可争议。"),a("br"),t._v("\n②当{}前面没有运算符时候但有;结尾的时候，或者浏览器的自动分号插入机制给{}后面插入分号(;)时候，此时{}都会被解析成代码块。\n③如果{}前面什么运算符都没有，{}后面也没有分号(;)结尾，Firefox会始终如一的解析为代码块，而chrome有细微的差别，chrome会解析为对象字面量。")])])]),t._v(" "),a("h2",{attrs:{id:"五、-ecmascript的规范定义的抽象操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、-ecmascript的规范定义的抽象操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 五、 ECMAScript的规范定义的抽象操作")]),t._v(" "),a("p",[t._v("前面关于ECMAScript规范的解读，涉及到几个重要的抽象操作：")]),t._v(" "),a("ul",[a("li",[t._v("GetValue(v) : 引用规范类型")]),t._v(" "),a("li",[t._v("Type(x) : 获取x的类型")]),t._v(" "),a("li",[t._v("ToNumber(x) : 将x转换为Number类型")]),t._v(" "),a("li",[t._v("ToString(x) : 将x转换为String类型")]),t._v(" "),a("li",[t._v("SameValue(x,y) : 计算非数字类型x,y是否相同")]),t._v(" "),a("li",[t._v("ToPrimitive(x) : 将x转换为原始值")])]),t._v(" "),a("h3",{attrs:{id:"_5-1-原始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-原始值","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.1 原始值")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("原始值(primitives)\n\n1. undefined\n2. null\n3. boolean\n4. number\n5. string\n\n对象值(objects)。\n除了原始值外，其他的所有值都是对象类型的值，包括数组(array)和函数(function)等。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h3",{attrs:{id:"_5-2-getvalue-v"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-getvalue-v","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.2 GetValue(v)")]),t._v(" "),a("p",[t._v("GetValue(v) : 引用规范类型，"),a("br"),t._v("\n先看下SameValue()和ToPrimitive()两个操作。")]),t._v(" "),a("h3",{attrs:{id:"_5-3-samevalue-x-y"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-samevalue-x-y","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.3 SameValue(x,y)")]),t._v(" "),a("p",[t._v("这个SameValue操作说的就是，如果x,y两个值类型相同，但又不同时是Number类型时的比较是否相等的操作。")]),t._v(" "),a("h3",{attrs:{id:"_5-4-toprimitive-input-preferredtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-toprimitive-input-preferredtype","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.4 ToPrimitive(input [ , PreferredType])")]),t._v(" "),a("p",[t._v("ToPrimitive() 方法"),a("br"),t._v("\n转换成原始类型方法。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ToPrimitive(obj,preferredType)\n\nJS引擎内部转换为原始值ToPrimitive(obj,preferredType)函数接受两个参数，第一个obj为被转换的对象，第二个\npreferredType为希望转换成的类型（默认为空，接受的值为Number或String）\n\n在执行ToPrimitive(obj,preferredType)时如果第二个参数为空并且obj为Date的事例时，此时preferredType会\n被设置为String，其他情况下preferredType都会被设置为Number如果preferredType为Number，ToPrimitive执\n行过程如\n下：\n1. 如果obj为原始值，直接返回；\n2. 否则调用 obj.valueOf()，如果执行结果是原始值，返回之；\n3. 否则调用 obj.toString()，如果执行结果是原始值，返回之；\n4. 否则抛异常。\n\n如果preferredType为String，将上面的第2步和第3步调换，即：\n1. 如果obj为原始值，直接返回；\n2. 否则调用 obj.toString()，如果执行结果是原始值，返回之；\n3. 否则调用 obj.valueOf()，如果执行结果是原始值，返回之；\n4. 否则抛异常。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("h4",{attrs:{id:"obj-valueof-和-obj-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obj-valueof-和-obj-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" obj.valueOf() 和 obj.toString()")]),t._v(" "),a("h5",{attrs:{id:"tostring用来返回对象的字符串表示。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring用来返回对象的字符串表示。","aria-hidden":"true"}},[t._v("#")]),t._v(" toString用来返回对象的字符串表示。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Object]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//""空字符串')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Sun Feb 28 2016 13:40:36 GMT+0800 (中国标准时间)")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h5",{attrs:{id:"valueof方法返回对象的原始值，可能是字符串、数值或bool值等，看具体的对象。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valueof方法返回对象的原始值，可能是字符串、数值或bool值等，看具体的对象。","aria-hidden":"true"}},[t._v("#")]),t._v(" valueOf方法返回对象的原始值，可能是字符串、数值或bool值等，看具体的对象。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"obj"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//Object {name: "obj"}')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[1]")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1456638436303")]),t._v("\n如代码所示，三个不同的对象实例调用valueOf返回不同的数据\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[a("strong",[t._v("原始值指的是['Null','Undefined','String','Boolean','Number']五种基本数据类型之一，一开始就提到过。")])]),t._v(" "),a("p",[t._v("举个简单的例子:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n分析"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("a是对象类型但不是Date实例对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("所以preferredType默认是Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("先调用a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("不是原始值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("继续来调\n用a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("得到string字符串"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("此时为原始值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("返回之"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("所以最后ToPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("得到就是"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[object Object]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("如果觉得描述还不好明白,一大堆描述晦涩又难懂,我们用代码说话:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" toPrimitive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preferredType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Utils "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("typeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" types "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Null'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'String'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Boolean'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Undefined'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" types"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    preferredType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("preferredType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'String'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" Utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Date'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'String'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("preferredType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Object]",与上面文字分析的一致')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br")])]),a("h3",{attrs:{id:"_5-5-tonumber-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-tonumber-x","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.5 ToNumber(x)")]),t._v(" "),a("p",[t._v("这个就比ToPrimitive() 方法好理解多了，就是把其他类型按照一定的规则转化成数字类型，也就是类似Number()和parseInt()的方法。"),a("br"),t._v("\n还是继续看看ECMAScipt规范中对于Number的转换\n是不是又看到 ToPrimitive() 方法了，是不是看了上面的就好理解多了，如果ToNumber(x)这个x是对象就要调用ToPrimitive方法返回x的原始值，是不是一下子就串起来了。")]),t._v(" "),a("h3",{attrs:{id:"_5-6-tostring-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-tostring-x","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.6 ToString(x)")]),t._v(" "),a("p",[t._v("对数值类型应用 ToString")]),t._v(" "),a("p",[t._v("ToString 运算符将数字 m 转换为字符串格式的给出如下所示：")]),t._v(" "),a("ol",[a("li",[t._v('如果 m 是 NaN，返回字符串 "NaN"。')]),t._v(" "),a("li",[t._v('如果 m 是 +0 或 -0，返回字符串 "0"。')]),t._v(" "),a("li",[t._v('如果 m 小于零，返回连接 "-" 和 ToString (-m) 的字符串。')]),t._v(" "),a("li",[t._v('如果 m 无限大，返回字符串 "Infinity"。')]),t._v(" "),a("li",[t._v("否则，令 n, k, 和 s 是整数，使得 k ≥ 1, 10k-1 ≤ s < 10k，s × 10n-k 的数字值是 m，且 k 足够小。要注意的是，k 是 s 在十进制表示中的数字的个数。s 不被 10 整除，且s 的至少要求的有效数字位数不一定要被这些标准唯一确定。")]),t._v(" "),a("li",[t._v("如果 k ≤ n ≤ 21，返回由 k 个 s 在十进制表示中的数字组成的字符串（有序的，开头没有零），后面跟随字符 '0' 的 n-k 次出现。")]),t._v(" "),a("li",[t._v("如果 0 < n ≤ 21，返回由 s 在十进制表示中的、最多 n 个有效数字组成的字符串，后面跟随一个小数点 '. '，再后面是余下的 k-n 个 s 在十进制表示中的数字。")]),t._v(" "),a("li",[t._v("如果 -6 < n ≤ 0，返回由字符 '0' 组成的字符串，后面跟随一个小数点 '. '，再后面是字符 '0' 的 -n 次出现，再往后是 k 个 s 在十进制表示中的数字。")]),t._v(" "),a("li",[t._v("否则，如果 k = 1，返回由单个数字 s 组成的字符串，后面跟随小写字母 'e'，根据 n-1 是正或负，再后面是一个加号 '+' 或减号 '-' ，再往后是整数 abs(n-1) 的十进制表示（没有前置的零）。")]),t._v(" "),a("li",[t._v("返回由 s 在十进制表示中的、最多的有效数字组成的字符串，后面跟随一个小数点 '. '，再后面是余下的是 k-1 个 s 在十进制表示中的数字，再往后是小写字母 'e'，根据n-1 是正或负，再后面是一个加号 '+ ' 或减号 '-' ，再往后是整数 abs(n-1) 的十进制表示（没有前置的零）。")])]),t._v(" "),a("h3",{attrs:{id:"_5-7-转换规则："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-转换规则：","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.7 ==转换规则：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("undefined == null，结果是true。且它俩与所有其他值比较的结果都是false。")])]),t._v(" "),a("li",[a("p",[t._v("String == Boolean，需要两个操作数同时转为Number。")])]),t._v(" "),a("li",[a("p",[t._v("String/Boolean == Number，需要String/Boolean转为Number。")])]),t._v(" "),a("li",[a("p",[t._v("Object == Primitive，需要Object转为Primitive(具体通过valueOf和toString方法)。")]),t._v(" "),a("p",[t._v("一共只有4条规则！很清晰、很简单。")])])]),t._v(" "),a("h2",{attrs:{id:"六、验证分析-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、验证分析-10","aria-hidden":"true"}},[t._v("#")]),t._v(" 六、验证分析++[[]][+[]]+[+[]]==10?")]),t._v(" "),a("h3",{attrs:{id:"_1-首先-首先拆分一下："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-首先-首先拆分一下：","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.首先++[[]][+[]]+[+[]]首先拆分一下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"_2-先来分析右边的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-先来分析右边的","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.先来分析右边的[+[]]")]),t._v(" "),a("p",[t._v("①先看里面的+[]")]),t._v(" "),a("ul",[a("li",[t._v("根据 4.2 ECMAScript 一元运算符（+、-） 可以知道，一元运算符会调用 "),a("code",[t._v("ToNumber")]),t._v(" 方法把 "),a("code",[t._v("ToNumber([])")]),t._v(" 转化成数字。")]),t._v(" "),a("li",[t._v("根据 5.5 "),a("code",[t._v("ToNumber(x)")]),t._v(" 的转换规则，x为[]是数组对象，因此会调用 "),a("code",[t._v("ToPrimitive")]),t._v(" 方法。")]),t._v(" "),a("li",[t._v("根据 5.4 "),a("code",[t._v("ToPrimitive(input [ , PreferredType])")]),t._v(" 的转换规则，空数组先调用 "),a("code",[t._v("valueOf()")]),t._v(" 方法，得到"),a("code",[t._v("[]")]),t._v("不是原始值，继续调用 "),a("code",[t._v("toString()")]),t._v(" 方法，得到 "),a("code",[t._v('""空字符串')]),t._v(" 。")]),t._v(" "),a("li",[t._v("递归的调用之后成了 "),a("code",[t._v('ToNumber("")')]),t._v(" ,答案显而易见，根据 5.5 "),a("code",[t._v("ToNumber(x)")]),t._v(" 的转换规则对照图片可以看出"),a("code",[t._v('ToNumber("")===0')]),t._v("。 那么"),a("code",[t._v("[+[]]")]),t._v("就变相的成了"),a("code",[t._v("[0]")]),t._v(" 。")])]),t._v(" "),a("p",[a("strong",[t._v("此时成了(++[[]][+[]])+[0]")])]),t._v(" "),a("h3",{attrs:{id:"_3-再来分析左边边的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-再来分析左边边的","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.再来分析左边边的++[[]][+[]]")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("+[]")]),t._v("上面已经分析出来了，结果为0，那么此时就成了"),a("code",[t._v("++[[]][0]")])]),t._v(" "),a("li",[t._v("根据 4.2 ECMAScript 一元运算符（+、-） 可以知道，数组下标的优先级高于一元运算符++，那么理所当然成了这样 "),a("code",[t._v("++([[]][0])")]),t._v(" ,而"),a("code",[t._v("[[]][0]")]),t._v("可以看出数组下标为0也就是第一个元素，此时为"),a("code",[t._v("[]")]),t._v(",那么最后成了"),a("code",[t._v("++[]")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("++[]")]),t._v("这是什么鬼ghost，根据 4.5 ECMAScript 前自增运算符（++） 没有发现任何有调用 "),a("code",[t._v("ToNumber")]),t._v(" 的方法，浏览器试了一下，果然有问题，报错啦，到底哪里出问题了呢，为什么走着走着就走偏了。问题出在哪一步呢？")])]),t._v(" "),a("h3",{attrs:{id:"_4-分析问题错误的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-分析问题错误的原因","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.分析问题错误的原因")]),t._v(" "),a("p",[t._v("首先我们在浏览器输出一下++[]"),a("br"),t._v("\n无意之中照着错误搜，搜到了这个后缀自增++：")]),t._v(" "),a("p",[a("strong",[t._v("Increment Operator_操作的第5步PutValue(expr, newValue)要求expr是引用。这就是问题的关键")])]),t._v(" "),a("h3",{attrs:{id:"_5-进一步拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-进一步拆分","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.进一步拆分")]),t._v(" "),a("p",[a("code",[t._v("++[[]][0]")]),t._v("可以这么拆分，只要保持引用关系就行：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" refence"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("；\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("refence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("再来进一步拆分")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" refence"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrefence"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("refence"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("最后就成了")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("refence"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("根据 4.3 ECMAScript 加法运算符（+） ，"),a("code",[t._v("[]+1")]),t._v("可以看成是"),a("code",[t._v("ToPrimitive([]）+ToPrimitive（1）")]),t._v("，根据 5.4 "),a("code",[t._v("ToPrimitive(input [ , PreferredType])")]),t._v(" 的转换规则，空数组先调用"),a("code",[t._v("valueOf()")]),t._v(" 方法，得到"),a("code",[t._v("[]")]),t._v("不是原始值，继续调用 "),a("code",[t._v("toString()")]),t._v(" 方法，得到 "),a("code",[t._v('""')]),t._v(" 空字符串。")]),t._v(" "),a("p",[t._v("于是就成了 "),a("code",[t._v('""+1')]),t._v(" ，根据 4.3 ECMAScript 加法运算符（+） ，有一个字符串，另外一个也会变成字符串，所以"),a("code",[t._v('""+1==="1"')]),t._v("。所以 "),a("code",[t._v('++[[]][0] === "1"')]),t._v(" ;")])])}),[],!1,null,null,null);s.default=e.exports}}]);