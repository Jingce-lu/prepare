(window.webpackJsonp=window.webpackJsonp||[]).push([[546],{908:function(e,t,_){"use strict";_.r(t);var v=_(45),r=Object(v.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"react-高频面-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#react-高频面-2"}},[e._v("#")]),e._v(" React 高频面 2")]),e._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#_1-为什么选择使用框架而不是原生"}},[e._v("1. 为什么选择使用框架而不是原生?")])]),_("li",[_("a",{attrs:{href:"#_2-虚拟-dom-的优劣如何"}},[e._v("2. 虚拟 DOM 的优劣如何?")])]),_("li",[_("a",{attrs:{href:"#_3-虚拟-dom-实现原理"}},[e._v("3. 虚拟 DOM 实现原理?")])]),_("li",[_("a",{attrs:{href:"#_4-setstate-到底是异步还是同步"}},[e._v("4. setState 到底是异步还是同步?")])]),_("li",[_("a",{attrs:{href:"#_5-react-组件通信如何实现"}},[e._v("5. React 组件通信如何实现?")])]),_("li",[_("a",{attrs:{href:"#_6-react-如何进行组件-逻辑复用"}},[e._v("6. React 如何进行组件/逻辑复用?")])]),_("li",[_("a",{attrs:{href:"#_7-mixin、hoc、render-props、react-hooks-的优劣如何"}},[e._v("7. mixin、hoc、render props、react-hooks 的优劣如何？")])]),_("li",[_("a",{attrs:{href:"#_8-你是如何理解-fiber-的"}},[e._v("8. 你是如何理解 fiber 的?")])]),_("li",[_("a",{attrs:{href:"#_9-你对-time-slice-的理解"}},[e._v("9. 你对 Time Slice 的理解?")])]),_("li",[_("a",{attrs:{href:"#_10-redux-的工作流程"}},[e._v("10. redux 的工作流程?")])]),_("li",[_("a",{attrs:{href:"#_11-react-redux-是如何工作的"}},[e._v("11. react-redux 是如何工作的?")])]),_("li",[_("a",{attrs:{href:"#_12-redux-与-mobx-的区别"}},[e._v("12. redux 与 mobx 的区别?")])]),_("li",[_("a",{attrs:{href:"#_13-redux-中如何进行异步操作"}},[e._v("13. redux 中如何进行异步操作?")])]),_("li",[_("a",{attrs:{href:"#_14-redux-异步中间件之间的优劣"}},[e._v("14. redux 异步中间件之间的优劣?")])])])]),_("p"),e._v(" "),_("h2",{attrs:{id:"_1-为什么选择使用框架而不是原生"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么选择使用框架而不是原生"}},[e._v("#")]),e._v(" 1. 为什么选择使用框架而不是原生?")]),e._v(" "),_("p",[e._v("框架的好处:")]),e._v(" "),_("ol",[_("li",[e._v("组件化: 其中以 React 的组件化最为彻底,甚至可以到函数级别的原子组件,高度的组件化可以是我们的工程易于维护、易于组合拓展。")]),e._v(" "),_("li",[e._v("天然分层: JQuery 时代的代码大部分情况下是面条代码,耦合严重,现代框架不管是 MVC、MVP 还是 MVVM 模式都能帮助我们进行分层，代码解耦更易于读写。")]),e._v(" "),_("li",[e._v("生态: 现在主流前端框架都自带生态,不管是数据流管理架构还是 UI 库都有成熟的解决方案。")]),e._v(" "),_("li",[e._v("开发效率: 现代前端框架都默认自动更新 DOM,而非我们手动操作,解放了开发者的手动 DOM 成本,提高开发效率,从根本上解决了 UI 与状态同步问题.")])]),e._v(" "),_("h2",{attrs:{id:"_2-虚拟-dom-的优劣如何"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟-dom-的优劣如何"}},[e._v("#")]),e._v(" 2. 虚拟 DOM 的优劣如何?")]),e._v(" "),_("p",[e._v("优点:")]),e._v(" "),_("ul",[_("li",[e._v("保证性能下限: 虚拟 DOM 可以经过 diff 找出最小差异,然后批量进行 patch,这种操作虽然比不上手动优化,但是比起粗暴的 DOM 操作性能要好很多,因此虚拟 DOM 可以保证性能下限")]),e._v(" "),_("li",[e._v("无需手动操作 DOM: 虚拟 DOM 的 diff 和 patch 都是在一次更新中自动进行的,我们无需手动操作 DOM,极大提高开发效率")]),e._v(" "),_("li",[e._v("跨平台: 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关,相比之下虚拟 DOM 可以进行更方便地跨平台操作,例如服务器渲染、移动端开发等等")])]),e._v(" "),_("p",[e._v("缺点:")]),e._v(" "),_("ul",[_("li",[e._v("无法进行极致优化: 在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化,比如 VScode 采用直接手动操作 DOM 的方式进行极端的性能优化")])]),e._v(" "),_("h2",{attrs:{id:"_3-虚拟-dom-实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-虚拟-dom-实现原理"}},[e._v("#")]),e._v(" 3. 虚拟 DOM 实现原理?")]),e._v(" "),_("ul",[_("li",[e._v("虚拟 DOM 本质上是 JavaScript 对象,是对真实 DOM 的抽象")]),e._v(" "),_("li",[e._v("状态变更时，记录新树和旧树的差异")]),e._v(" "),_("li",[e._v("最后把差异更新到真正的 dom 中")])]),e._v(" "),_("h2",{attrs:{id:"_4-setstate-到底是异步还是同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-setstate-到底是异步还是同步"}},[e._v("#")]),e._v(" 4. setState 到底是异步还是同步?")]),e._v(" "),_("p",[e._v("有时表现出异步,有时表现出同步")]),e._v(" "),_("ol",[_("li",[_("code",[e._v("setState")]),e._v("只在合成事件和钩子函数中是“异步”的，在"),_("code",[e._v("原生事件")]),e._v("和"),_("code",[e._v("setTimeout")]),e._v("  中都是同步的。")]),e._v(" "),_("li",[_("code",[e._v("setState")]),e._v("  的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数  "),_("code",[e._v("setState(partialState, callback)")]),e._v("  中的"),_("code",[e._v("callback")]),e._v("拿到更新后的结果。")]),e._v(" "),_("li",[_("code",[e._v("setState")]),e._v("  的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和 setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次"),_("code",[e._v("setState")]),e._v("，"),_("code",[e._v("setState")]),e._v("的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时"),_("code",[e._v("setState")]),e._v("多个不同的值，在更新时会对其进行合并批量更新。")])]),e._v(" "),_("h2",{attrs:{id:"_5-react-组件通信如何实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-react-组件通信如何实现"}},[e._v("#")]),e._v(" 5. React 组件通信如何实现?")]),e._v(" "),_("p",[e._v("React 组件间通信方式:")]),e._v(" "),_("ul",[_("li",[e._v("父组件向子组件通讯: 父组件可以向子组件通过传 props 的方式，向子组件进行通讯")]),e._v(" "),_("li",[e._v("子组件向父组件通讯: props+回调的方式,父组件向子组件传递 props 进行通讯，此 props 为作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数，传递到父组件的作用域中")]),e._v(" "),_("li",[e._v("兄弟组件通信: 找到这两个兄弟节点共同的父节点,结合上面两种方式由父节点转发信息进行通信")]),e._v(" "),_("li",[e._v("跨层级通信: "),_("code",[e._v("Context")]),e._v("设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言,\b 对于跨越多层的全局数据通过"),_("code",[e._v("Context")]),e._v("通信再适合不过")]),e._v(" "),_("li",[e._v("发布订阅模式: 发布者发布事件，订阅者监听事件并做出反应,我们可以通过引入 event 模块进行通信")]),e._v(" "),_("li",[e._v("全局状态管理工具: 借助 Redux 或者 Mobx 等全局状态管理工具进行通信,这种工具会维护一个全局状态中心 Store,并根据不同的事件产生新的状态")])]),e._v(" "),_("h2",{attrs:{id:"_6-react-如何进行组件-逻辑复用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-react-如何进行组件-逻辑复用"}},[e._v("#")]),e._v(" 6. React 如何进行组件/逻辑复用?")]),e._v(" "),_("p",[e._v("抛开已经被官方弃用的 Mixin,组件抽象的技术目前有三种比较主流:")]),e._v(" "),_("ol",[_("li",[e._v("高阶组件:\n"),_("ul",[_("li",[e._v("属性代理")]),e._v(" "),_("li",[e._v("反向继承")])])]),e._v(" "),_("li",[e._v("渲染属性")]),e._v(" "),_("li",[e._v("react-hooks")])]),e._v(" "),_("h2",{attrs:{id:"_7-mixin、hoc、render-props、react-hooks-的优劣如何"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-mixin、hoc、render-props、react-hooks-的优劣如何"}},[e._v("#")]),e._v(" 7. mixin、hoc、render props、react-hooks 的优劣如何？")]),e._v(" "),_("p",[_("strong",[e._v("Mixin 的缺陷：")])]),e._v(" "),_("ul",[_("li",[e._v("组件与 Mixin 之间存在隐式依赖（Mixin 经常依赖组件的特定方法，但在定义组件时并不知道这种依赖关系）")]),e._v(" "),_("li",[e._v("多个 Mixin 之间可能产生冲突（比如定义了相同的 state 字段）")]),e._v(" "),_("li",[e._v("Mixin 倾向于增加更多状态，这降低了应用的可预测性（The more state in your application, the harder it is to reason about it.），导致复杂度剧增")]),e._v(" "),_("li",[e._v("隐式依赖导致依赖关系不透明，维护成本和理解成本迅速攀升：\n"),_("ul",[_("li",[e._v("难以快速理解组件行为，需要全盘了解所有依赖 Mixin 的扩展行为，及其之间的相互影响")]),e._v(" "),_("li",[e._v("组价自身的方法和 state 字段不敢轻易删改，因为难以确定有没有 Mixin 依赖它")]),e._v(" "),_("li",[e._v("Mixin 也难以维护，因为 Mixin 逻辑最后会被打平合并到一起，很难搞清楚一个 Mixin 的输入输出")])])])]),e._v(" "),_("p",[_("strong",[e._v("HOC 相比 Mixin 的优势:")])]),e._v(" "),_("ul",[_("li",[e._v("HOC 通过外层组件通过 Props 影响内层组件的状态，而不是直接改变其 State 不存在冲突和互相干扰,这就降低了耦合度")]),e._v(" "),_("li",[e._v("不同于 Mixin 的打平+合并，HOC 具有天然的层级结构（组件树结构），这又降低了复杂度")])]),e._v(" "),_("p",[_("strong",[e._v("HOC 的缺陷:")])]),e._v(" "),_("ul",[_("li",[e._v("扩展性限制: HOC 无法从外部访问子组件的 State 因此无法通过 shouldComponentUpdate 滤掉不必要的更新,React 在支持 ES6 Class 之后提供了 React.PureComponent 来解决这个问题")]),e._v(" "),_("li",[e._v("Ref 传递问题: Ref 被隔断,后来的 React.forwardRef 来解决这个问题")]),e._v(" "),_("li",[e._v("Wrapper Hell: HOC 可能出现多层包裹组件的情况,多层抽象同样增加了复杂度和理解成本")]),e._v(" "),_("li",[e._v("命名冲突: 如果高阶组件多次嵌套,没有使用命名空间的话会产生冲突,然后覆盖老属性")]),e._v(" "),_("li",[e._v("不可见性: HOC 相当于在原有组件外层再包装一个组件,你压根不知道外层的包装是啥,对于你是黑盒")])]),e._v(" "),_("p",[_("strong",[e._v("Render Props 优点:")])]),e._v(" "),_("ul",[_("li",[e._v("上述 HOC 的缺点 Render Props 都可以解决")])]),e._v(" "),_("p",[_("strong",[e._v("Render Props 缺陷:")])]),e._v(" "),_("ul",[_("li",[e._v("使用繁琐: HOC 使用只需要借助装饰器语法通常一行代码就可以进行复用,Render Props 无法做到如此简单")]),e._v(" "),_("li",[e._v("嵌套过深: Render Props 虽然摆脱了组件多层嵌套的问题,但是转化为了函数回调的嵌套")])]),e._v(" "),_("p",[_("strong",[e._v("React Hooks 优点:")])]),e._v(" "),_("ul",[_("li",[e._v("简洁: React Hooks 解决了 HOC 和 Render Props 的嵌套问题,更加简洁")]),e._v(" "),_("li",[e._v("解耦: React Hooks 可以更方便地把 UI 和状态分离,做到更彻底的解耦")]),e._v(" "),_("li",[e._v("组合: Hooks 中可以引用另外的 Hooks 形成新的 Hooks,组合变化万千")]),e._v(" "),_("li",[e._v("函数友好: React Hooks 为函数组件而生,从而解决了类组件的几大问题:\n"),_("ul",[_("li",[e._v("this 指向容易错误")]),e._v(" "),_("li",[e._v("分割在不同声明周期中的逻辑使得代码难以理解和维护")]),e._v(" "),_("li",[e._v("代码复用成本高（高阶组件容易使代码量剧增）")])])])]),e._v(" "),_("p",[_("strong",[e._v("React Hooks 缺陷:")])]),e._v(" "),_("ul",[_("li",[e._v("额外的学习成本（Functional Component 与 Class Component 之间的困惑）")]),e._v(" "),_("li",[e._v("写法上有限制（不能出现在条件、循环中），并且写法限制增加了重构成本")]),e._v(" "),_("li",[e._v("破坏了 PureComponent、React.memo 浅比较的性能优化效果（为了取最新的 props 和 state，每次 render()都要重新创建事件处函数）")]),e._v(" "),_("li",[e._v("在闭包场景可能会引用到旧的 state、props 值")]),e._v(" "),_("li",[e._v("内部实现上不直观（依赖一份可变的全局状态，不再那么“纯”）")]),e._v(" "),_("li",[e._v("React.memo 并不能完全替代 shouldComponentUpdate（因为拿不到 state change，只针对 props change）")])]),e._v(" "),_("h2",{attrs:{id:"_8-你是如何理解-fiber-的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-你是如何理解-fiber-的"}},[e._v("#")]),e._v(" 8. 你是如何理解 fiber 的?")]),e._v(" "),_("p",[e._v("React Fiber 是一种基于浏览器的"),_("strong",[e._v("单线程调度算法")]),e._v(".")]),e._v(" "),_("p",[e._v("React 16 之前 ，"),_("code",[e._v("reconcilation")]),e._v(" 算法实际上是递归，想要中断递归是很困难的，React 16 开始使用了循环来代替之前的递归.")]),e._v(" "),_("p",[_("code",[e._v("Fiber")]),e._v("："),_("strong",[e._v("一种将 "),_("code",[e._v("recocilation")]),e._v(" （递归 diff），拆分成无数个小任务的算法；它随时能够停止，恢复。停止恢复的时机取决于当前的一帧（16ms）内，还有没有足够的时间允许计算")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"_9-你对-time-slice-的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-你对-time-slice-的理解"}},[e._v("#")]),e._v(" 9. 你对 Time Slice 的理解?")]),e._v(" "),_("p",[e._v("时间分片")]),e._v(" "),_("ul",[_("li",[e._v("React 在渲染（render）的时候，不会阻塞现在的线程")]),e._v(" "),_("li",[e._v("如果你的设备足够快，你会感觉渲染是同步的")]),e._v(" "),_("li",[e._v("如果你设备非常慢，你会感觉还算是灵敏的")]),e._v(" "),_("li",[e._v("虽然是异步渲染，但是你将会看到完整的渲染，而不是一个组件一行行的渲染出来")]),e._v(" "),_("li",[e._v("同样书写组件的方式")])]),e._v(" "),_("h2",{attrs:{id:"_10-redux-的工作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-redux-的工作流程"}},[e._v("#")]),e._v(" 10. redux 的工作流程?")]),e._v(" "),_("p",[e._v("首先，我们看下几个核心概念：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Store")]),e._v("：保存数据的地方，你可以把它看成一个容器，整个应用只能有一个 Store。")]),e._v(" "),_("li",[_("code",[e._v("State")]),e._v("：Store 对象包含所有数据，如果想得到某个时点的数据，就要对 Store 生成快照，这种时点的数据集合，就叫做 State。")]),e._v(" "),_("li",[_("code",[e._v("Action")]),e._v("：State 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。")]),e._v(" "),_("li",[_("code",[e._v("Action Creator")]),e._v("：View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦，所以我们定义一个函数来生成 Action，这个函数就叫 Action Creator。")]),e._v(" "),_("li",[_("code",[e._v("Reducer")]),e._v("：Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。")]),e._v(" "),_("li",[_("code",[e._v("dispatch")]),e._v("：是 View 发出 Action 的唯一方法。")])]),e._v(" "),_("p",[e._v("然后我们过下整个工作流程：")]),e._v(" "),_("ol",[_("li",[e._v("首先，用户（通过 View）发出 Action，发出方式就用到了 dispatch 方法。")]),e._v(" "),_("li",[e._v("然后，Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action，Reducer 会返回新的 State")]),e._v(" "),_("li",[e._v("State 一旦有变化，Store 就会调用监听函数，来更新 View。")])]),e._v(" "),_("p",[e._v("到这儿为止，一次用户交互流程结束。可以看到，在整个流程中数据都是单向流动的，这种方式保证了流程的清晰。")]),e._v(" "),_("img",{attrs:{src:e.$withBase("/images/prepare/zonghe/2019101201.png"),alt:"images/prepare/zonghe/2019101201.png"}}),e._v(" "),_("h2",{attrs:{id:"_11-react-redux-是如何工作的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-react-redux-是如何工作的"}},[e._v("#")]),e._v(" 11. react-redux 是如何工作的?")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Provider")]),e._v(": Provider 的作用是从最外部封装了整个应用，并向 connect 模块传递 store")]),e._v(" "),_("li",[_("code",[e._v("connect")]),e._v(": 负责连接 React 和 Redux\n"),_("ul",[_("li",[e._v("获取 state: connect 通过 context 获取 Provider 中的 store，通过 store.getState()获取整个 store tree 上所有 state")]),e._v(" "),_("li",[e._v("包装原组件: 将 state 和 action 通过 props 的方式传入到原组件内部 wrapWithConnect 返回一个 ReactComponent 对象 Connect，Connect 重新 render 外部传入的原组件 WrappedComponent，并把 connect 中传入的 mapStateToProps, mapDispatchToProps 与组件上原有的 props 合并后，通过属性的方式传给 WrappedComponent")]),e._v(" "),_("li",[e._v("监听 store tree 变化: connect 缓存了 store tree 中 state 的状态,通过当前 state 状态和变更前 state 状态进行比较,从而确定是否调用"),_("code",[e._v("this.setState()")]),e._v("方法触发 Connect 及其子组件的重新渲染")])])])]),e._v(" "),_("img",{attrs:{src:e.$withBase("/images/prepare/zonghe/2019101202.png"),alt:"images/prepare/zonghe/2019101202.png"}}),e._v(" "),_("h2",{attrs:{id:"_12-redux-与-mobx-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12-redux-与-mobx-的区别"}},[e._v("#")]),e._v(" 12. redux 与 mobx 的区别?")]),e._v(" "),_("p",[e._v("两者对比:")]),e._v(" "),_("ul",[_("li",[e._v("redux 将数据保存在单一的 store 中，mobx 将数据保存在分散的多个 store 中")]),e._v(" "),_("li",[e._v("redux 使用 plain object 保存数据，需要手动处理变化后的操作；mobx 适用 observable 保存数据，数据变化后自动处理响应的操作")]),e._v(" "),_("li",[e._v("redux 使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数；mobx 中的状态是可变的，可以直接对其进行修改")]),e._v(" "),_("li",[e._v("mobx 相对来说比较简单，在其中有很多的抽象，mobx 更多的使用面向对象的编程思维；redux 会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用")]),e._v(" "),_("li",[e._v("mobx 中有更多的抽象和封装，调试会比较困难，同时结果也难以预测；而 redux 提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易")])]),e._v(" "),_("p",[e._v("场景辨析:")]),e._v(" "),_("p",[e._v("基于以上区别,我们可以简单得分析一下两者的不同使用场景.")]),e._v(" "),_("ul",[_("li",[e._v("mobx 更适合数据不复杂的应用: mobx 难以调试,很多状态无法回溯,面对复杂度高的应用时,往往力不从心.")]),e._v(" "),_("li",[e._v("redux 适合有回溯需求的应用: 比如一个画板应用、一个表格应用，很多时候需要撤销、重做等操作，由于 redux 不可变的特性，天然支持这些操作.")]),e._v(" "),_("li",[e._v("mobx 适合短平快的项目: mobx 上手简单,样板代码少,可以很大程度上提高开发效率.")]),e._v(" "),_("li",[e._v("当然 mobx 和 redux 也并不一定是非此即彼的关系,你也可以在项目中用 redux 作为全局状态管理,用 mobx 作为组件局部状态管理器来用.")])]),e._v(" "),_("h2",{attrs:{id:"_13-redux-中如何进行异步操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13-redux-中如何进行异步操作"}},[e._v("#")]),e._v(" 13. redux 中如何进行异步操作?")]),e._v(" "),_("p",[e._v("当然,我们可以在"),_("code",[e._v("componentDidmount")]),e._v("中直接进行请求无须借助 redux.")]),e._v(" "),_("p",[e._v("但是在一定规模的项目中,上述方法很难进行异步流的管理,通常情况下我们会借助 redux 的异步中间件进行异步处理.")]),e._v(" "),_("p",[e._v("redux 异步流中间件其实有很多,但是当下主流的异步中间件只有两种 redux-thunk、redux-saga，当然 redux-observable 可能也有资格占据一席之地,其余的异步中间件不管是社区活跃度还是 npm 下载量都比较差了.")]),e._v(" "),_("h2",{attrs:{id:"_14-redux-异步中间件之间的优劣"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14-redux-异步中间件之间的优劣"}},[e._v("#")]),e._v(" 14. redux 异步中间件之间的优劣?")]),e._v(" "),_("p",[_("strong",[e._v("redux-thunk 优点")]),e._v(":")]),e._v(" "),_("ul",[_("li",[e._v("体积小: redux-thunk 的实现方式很简单,只有不到 20 行代码")]),e._v(" "),_("li",[e._v("使用简单: redux-thunk 没有引入像 redux-saga 或者 redux-observable 额外的范式,上手简单")])]),e._v(" "),_("p",[_("strong",[e._v("redux-thunk 缺陷:")])]),e._v(" "),_("ul",[_("li",[e._v("样板代码过多: 与 redux 本身一样,通常一个请求需要大量的代码,而且很多都是重复性质的")]),e._v(" "),_("li",[e._v("耦合严重: 异步操作与 redux 的 action 偶合在一起,不方便管理")]),e._v(" "),_("li",[e._v("功能孱弱: 有一些实际开发中常用的功能需要自己进行封装")])]),e._v(" "),_("p",[_("strong",[e._v("redux-saga 优点:")])]),e._v(" "),_("ul",[_("li",[e._v("异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中")]),e._v(" "),_("li",[e._v("action 摆脱 thunk function: dispatch 的参数依然是一个纯粹的 action (FSA)，而不是充满 “黑魔法” thunk function")]),e._v(" "),_("li",[e._v("异常处理: 受益于 generator function 的 saga 实现，代码异常/请求失败 都可以直接通过 try/catch 语法直接捕获处理")]),e._v(" "),_("li",[e._v("功能强大: redux-saga 提供了大量的 Saga 辅助函数和 Effect 创建器供开发者使用,开发者无须封装或者简单封装即可使用")]),e._v(" "),_("li",[e._v("灵活: redux-saga 可以将多个 Saga 可以串行/并行组合起来,形成一个非常实用的异步 flow")]),e._v(" "),_("li",[e._v("易测试: 提供了各种 case 的测试方案，包括 mock task，分支覆盖等等")])]),e._v(" "),_("p",[_("strong",[e._v("redux-saga 缺陷:")])]),e._v(" "),_("ul",[_("li",[e._v("额外的学习成本: redux-saga 不仅在使用难以理解的 generator function,而且有数十个 API,学习成本远超 redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与 redux-observable 不同,redux-observable 虽然也有额外学习成本但是背后是 rxjs 和一整套思想")]),e._v(" "),_("li",[e._v("体积庞大: 体积略大,代码近 2000 行，min 版 25KB 左右")]),e._v(" "),_("li",[e._v("功能过剩: 实际上并发控制等功能很难用到,但是我们依然需要引入这些代码")]),e._v(" "),_("li",[e._v("ts 支持不友好: yield 无法返回 TS 类型")])]),e._v(" "),_("p",[_("strong",[e._v("redux-observable 优点:")])]),e._v(" "),_("ul",[_("li",[e._v("功能最强: 由于背靠 rxjs 这个强大的响应式编程的库,借助 rxjs 的操作符,你可以几乎做任何你能想到的异步处理")]),e._v(" "),_("li",[e._v("背靠 rxjs: 由于有 rxjs 的加持,如果你已经学习了 rxjs,redux-observable 的学习成本并不高,而且随着 rxjs 的升级 redux-observable 也会变得更强大")])]),e._v(" "),_("p",[_("strong",[e._v("redux-observable 缺陷:")])]),e._v(" "),_("ul",[_("li",[e._v("学习成本奇高: 如果你不会 rxjs,则需要额外学习两个复杂的库")]),e._v(" "),_("li",[e._v("社区一般: redux-observable 的下载量只有 redux-saga 的 1/5,社区也不够活跃,在复杂异步流中间件这个层面 redux-saga 仍处于领导地位")])])])}),[],!1,null,null,null);t.default=r.exports}}]);